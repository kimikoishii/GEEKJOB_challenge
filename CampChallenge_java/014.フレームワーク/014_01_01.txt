Javaのフレームワーク


●JSF（JavaServer Faces）
・Java EEで動作するコンポーネントベースフレームワーク
・実装はHTMLベースのWebアプリケーションに限定される
・大量のアクセスが発生するアプリには向かない
・再利用性が高い

・XHTMLと独自タグ「Facelets」でViewを記述
・JavaScriptなどの画面デザインのスキルがなくても画面が作成できる
・ViewとJavaプログラムを直接結び付けることができる
・HTMLの変換も容易（分業が行いやすい）
・クライアントサイドでViewを構築するようなフレームワークとは相性が悪い

・バッキングBeanでサーバサイドロジックなどを実行
・JavaScriptを書かずともイベント処理などを簡単に使える
・JSFのみではWebサービスを提供できない

●Play Framework
・JavaとScalaをサポートしている
・特にWebシステムやWebサービス開発に向いている

・軽量で動作も速い
・CPUやメモリーに負担が少ない
・コンパイル不要

・機能がシンプルなため、すぐに開発を始められる
・ほとんどのものが自前で用意されている
・独自規格のため、他に応用がきかない

・拡張性が高い
・エラー表示が分かりやすい
・JSPは使用せず、htmlとGroovyを組み合わせて使用

●Spring Framework
・コンポーネントの集合体
・7種類のモジュールで構成
・柔軟性や拡張性が高い
・さまざまなアプリに適用できる万能型のフレームワーク
・特にWebシステムやWebサービスの開発に強い
・詳細なエラー情報の出力ができる

・「Spring MVC Test」という専用のテストプログラムを使う
　（結合テストを行う）
・基本的な機能の大部分がインターフェイスとして提供されている
・必要な機能を外部から簡単に追加できる

・オブジェクト指向の基本原則を徹底している
・1つ1つのプログラムを独立させやすい（変更に強い）
・AOPを用いることができる
　（クラスには「本質的な処理」のみを書き、
　「本質的ではない処理（共通化出来る処理）」は別に書く
　というプログラミングのこと）
　＞バグの原因を特定しやすい
　＞共通のプログラムをまとめやすく、再利用もしやすい



○参考
https://www.sejuku.net/blog/3333
http://www.atmarkit.co.jp/ait/articles/1601/18/news022.html
https://eng-entrance.com/java-framework
http://d.hatena.ne.jp/ryoasai/20101118/1290088022
https://atuweb.net/201509_spring_framework_good_points/
https://blog.codecamp.jp/post-30644
http://www.atmarkit.co.jp/ait/articles/1204/09/news114.html
https://www.ossnews.jp/oss_info/Play_Framework
http://www.vintage.ne.jp/blog/2014/09/340